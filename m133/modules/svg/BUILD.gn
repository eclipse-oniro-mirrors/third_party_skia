# Copyright 2020 Google Inc.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/ohos.gni")
import("../../gn/skia.gni")

if (skia_enable_svg && skia_use_expat) {
  config("public_config") {
    defines = [ "SK_ENABLE_SVG" ]
    include_dirs = [ "include" ]
    include_dirs += [
      "${skia_root_dir}",
      "${skia_modules_dir}/svg/include",
      "${skia_modules_dir}/skresources/include",
      "${skia_modules_dir}/skshaper/include",
    ]
  }

  config("svg_private_config") {
    defines = []
    if (skia_use_harfbuzz) {
      defines += [ "SK_SHAPER_HARFBUZZ_AVAILABLE" ]
    }
    if (skia_enable_skunicode) {
      defines += [ "SK_SHAPER_UNICODE_AVAILABLE" ]
    }
    if (skia_use_libgrapheme) {
      defines += [ "SK_UNICODE_LIBGRAPHEME_IMPLEMENTATION" ]
    }
    if (skia_use_icu4x) {
      defines += [ "SK_UNICODE_ICU4X_IMPLEMENTATION" ]
    }
    if (skia_use_icu) {
      defines += [ "SK_UNICODE_ICU_IMPLEMENTATION" ]
    }
  }

  ohos_source_set("svg") {
    check_includes = false
    import("svg.gni")
    public_configs = [ ":public_config" ]
    public = skia_svg_public
    sources = skia_svg_sources
    configs = [ "../../:skia_private" ]
    if (use_oh_skia) {
      configs += [ "../../:skia_wno" ]
      configs += [ ":svg_private_config" ]
    }
  }

  if (skia_enable_tools) {
    if (defined(is_skia_standalone)) {
      skia_source_set("tool") {
        check_includes = false
        testonly = true

        configs = [ "../..:skia_private" ]
        sources = [ "utils/SvgTool.cpp" ]

        deps = [
          "../..:flags",
          "../..:skia",
          "../..:tool_utils",
        ]

        public_deps = [ ":svg" ]
      }
    }

    skia_source_set("tests") {
      testonly = true

      configs = [ "../..:skia_private" ]
      sources = [
        "tests/Filters.cpp",
        "tests/Text.cpp",
      ]

      deps = [
        ":svg",
        "../..:skia",
        "../..:test",
        "../skshaper",
      ]
      if (is_ohos) {
        external_deps = [ "hitrace:hitrace_meter" ]
        if (!build_ohos_sdk && !is_arkui_x) {
          external_deps += [ "init:libbegetutil" ]
          if (defined(defines)) {
            defines += [ "NOT_BUILD_FOR_OHOS_SDK" ]
          } else {
            defines = [ "NOT_BUILD_FOR_OHOS_SDK" ]
          }
        }
      }

      if (is_arkui_x) {
          deps += [ "//third_party/bounds_checking_function:libsec_static" ]
      } else if (is_ohos) {
        if (is_component_build) {
          external_deps += [ "bounds_checking_function:libsec_shared" ]
        } else {
          external_deps += [ "bounds_checking_function:libsec_static" ]
        }
      }
    }
  }
} else {
  group("svg") {
  }
  group("tests") {
  }
}
