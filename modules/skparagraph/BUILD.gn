# Copyright 2019 Google LLC.

import("//build/ohos.gni")
import("//third_party/skia/gn/skia.gni")
import("//third_party/skia/modules/skshaper/skshaper.gni")
import("//third_party/skia/modules/skunicode/skunicode.gni")
import("skparagraph.gni")

skia_modules_root = "//third_party/skia/modules"

declare_args() {
  skia_enable_skparagraph = true
  paragraph_gms_enabled = true
  paragraph_tests_enabled = true
  paragraph_bench_enabled = false
}

config("skia_paragraph_config") {
  include_dirs = [
    "$skia_modules_root/skunicode",
    "$skia_modules_root/skshaper",
    "$skia_modules_root/skparagraph",
  ]
}

ohos_static_library("skia_paragraph_ohos") {
  part_name = "skia"
  subsystem_name = "thirdparty"

  deps = []
  sources = []
  external_deps = []
  public_configs = [ ":skia_paragraph_config" ]
  defines = [
    "OHOS_SUPPORT",
    "USE_SKIA_TXT",
  ]

  cflags_cc = [
    "-std=c++17",
    "-fvisibility=hidden",
  ]

  # skunicode
  defines += [
    "SKUNICODE_IMPLEMENTATION=1",
    "SK_UNICODE_AVAILABLE",
    "SK_UNICODE_ICU_IMPLEMENTATION",
  ]

  if (!is_arkui_x) {
    sources += [
      "$skia_modules_root/skunicode/src/SkUnicode.cpp",
      "$skia_modules_root/skunicode/src/SkUnicode_icu.cpp",
      "$skia_modules_root/skunicode/src/SkUnicode_icu_bidi.cpp",
      "$skia_modules_root/skunicode/src/SkUnicode_icu_builtin.cpp",
    ]
  }

  # skshaper
  defines += [ "SKSHAPER_IMPLEMENTATION=1" ]
  sources += [
    "$skia_modules_root/skshaper/src/SkShaper.cpp",
    "$skia_modules_root/skshaper/src/SkShaper_harfbuzz.cpp",
    "$skia_modules_root/skshaper/src/SkShaper_primitive.cpp",
  ]

  # skparagraph
  sources += [
    "$skia_modules_root/skparagraph/src/Decorations.cpp",
    "$skia_modules_root/skparagraph/src/FontArguments.cpp",
    "$skia_modules_root/skparagraph/src/FontCollection.cpp",
    "$skia_modules_root/skparagraph/src/HyphenTrie.cpp",
    "$skia_modules_root/skparagraph/src/Hyphenator.cpp",
    "$skia_modules_root/skparagraph/src/OneLineShaper.cpp",
    "$skia_modules_root/skparagraph/src/ParagraphBuilderImpl.cpp",
    "$skia_modules_root/skparagraph/src/ParagraphCache.cpp",
    "$skia_modules_root/skparagraph/src/ParagraphImpl.cpp",
    "$skia_modules_root/skparagraph/src/ParagraphLineFetcherImpl.cpp",
    "$skia_modules_root/skparagraph/src/ParagraphPainterImpl.cpp",
    "$skia_modules_root/skparagraph/src/ParagraphStyle.cpp",
    "$skia_modules_root/skparagraph/src/Run.cpp",
    "$skia_modules_root/skparagraph/src/RunBaseImpl.cpp",
    "$skia_modules_root/skparagraph/src/TextGlobalConfig.cpp",
    "$skia_modules_root/skparagraph/src/TextLine.cpp",
    "$skia_modules_root/skparagraph/src/TextLineBaseImpl.cpp",
    "$skia_modules_root/skparagraph/src/TextLineJustify.cpp",
    "$skia_modules_root/skparagraph/src/TextShadow.cpp",
    "$skia_modules_root/skparagraph/src/TextStyle.cpp",
    "$skia_modules_root/skparagraph/src/TextTabAlign.cpp",
    "$skia_modules_root/skparagraph/src/TextWrapper.cpp",
    "$skia_modules_root/skparagraph/src/TypefaceFontProvider.cpp",
  ]

  platform = current_os
  if (platform == "mingw") {
    platform = "windows"
  }

  if (is_arkui_x) {
    include_dirs = [ "//base/hiviewdfx/hitrace/interfaces/native/innerkits/include/hitrace_meter" ]
    defines += [ "CROSS_PLATFORM" ]
    deps += [
      "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog_${target_os}",
      "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics:2d_graphics",
      "//third_party/bounds_checking_function:libsec_static",
      "//third_party/icu/icu4c:static_icuuc",
      "//third_party/skia:skia_$platform",
    ]
  } else {
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "graphic_2d:2d_graphics",
      "hilog:libhilog",
      "icu:shared_icuuc",
    ]
  }

  if (current_os == "ohos") {
    defines += [ "ENABLE_OHOS_ENHANCE" ]
    external_deps += [
      "hitrace:hitrace_meter",
      "init:libbegetutil",
    ]
  }
}

if (skia_enable_skparagraph && skia_enable_skshaper && skia_enable_skunicode &&
    skia_use_harfbuzz) {
  config("public_config") {
    defines = [ "SK_ENABLE_PARAGRAPH" ]
    include_dirs = [
      "include",
      "utils",
    ]
  }

  skia_component("skparagraph") {
    import("skparagraph.gni")
    public_configs = [ ":public_config" ]
    public = skparagraph_public
    sources = skparagraph_sources
    configs = []
    if (use_oh_skia) {
      deps = [
        "../..:skia_canvaskit",
        "../skshaper",
        "../skunicode",
      ]
    } else {
      deps = [
        "../..:skia",
        "../skshaper",
        "../skunicode",
      ]
    }
  }

  config("utils_config") {
    include_dirs = [ "utils" ]
  }

  if (defined(is_skia_standalone) && skia_enable_tools) {
    import("skparagraph.gni")
    skia_source_set("utils") {
      public_configs = [ ":utils_config" ]
      configs = [ "../../:skia_private" ]
      sources = skparagraph_utils
      deps = [
        "../..:skia",
        "../skshaper",
      ]
    }

    skia_source_set("gm") {
      if (paragraph_gms_enabled && skia_use_icu) {
        testonly = true
        sources = [ "gm/simple_gm.cpp" ]
        if (use_oh_skia) {
          deps = [
            ":skparagraph",
            "../..:gpu_tool_utils",
          ]
        } else {
          deps = [
            ":skparagraph",
            "../..:gpu_tool_utils",
            "../..:skia",
            "../skshaper",
          ]
        }
      } else {
        sources = []
      }
    }

    skia_source_set("tests") {
      if (paragraph_tests_enabled && skia_use_icu) {
        testonly = true
        sources = skparagraph_tests
        if (is_ohos) {
          external_deps = [ "hitrace:hitrace_meter" ]
        }
        if (use_oh_skia) {
          deps = [
            ":skparagraph",
            "../..:test",
          ]
        } else {
          deps = [
            ":skparagraph",
            "../..:skia",
            "../..:test",
            "../skshaper",
          ]
        }
      } else {
        sources = []
      }
    }

    skia_source_set("bench") {
      if (paragraph_bench_enabled && skia_use_icu) {
        testonly = true
        sources = [ "bench/ParagraphBench.cpp" ]
        deps = [
          ":skparagraph",
          "../..:skia",
          "../skshaper",
        ]
      } else {
        sources = []
      }
    }

    skia_source_set("samples") {
      testonly = true
      sources = [ "samples/SampleParagraph.cpp" ]
      deps = [
        ":skparagraph",
        ":utils",
        "../..:skia",
        "../skshaper",
      ]
    }
  }
} else {
  group("skparagraph") {
  }
  group("utils") {
  }
  group("gm") {
  }
  group("tests") {
  }
  group("bench") {
  }
}
